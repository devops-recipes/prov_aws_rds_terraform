resources:
# Terraform State of Amazon RDS MySQL provisioning
  - name: aws_rds_mysql_tf_state
    type: state

# Output of Amazon RDS MySQL provisioning
  - name: aws_rds_mysql_tf_info
    type: params
    versionTemplate:
      params:
        SEED: "initial_version"

# AWS RDS MySQL settings like db name, username, password
  - name: aws_rds_mysql_tf_settings
    type: integration
    integration: "drship_aws_rds_mysql_settings"

templates: &terraform-init
  - pushd "$(shipctl get_resource_state "aws_rds_tf_repo")/mysql"
  - export AWS_ACCESS_KEY_ID=$(shipctl get_integration_resource_field aws_rds_tf_creds "accessKey")
  - export AWS_SECRET_ACCESS_KEY=$(shipctl get_integration_resource_field aws_rds_tf_creds "secretKey")
  - shipctl copy_file_from_resource_state aws_rds_mysql_tf_state terraform.tfstate .
  - shipctl replace terraform.tfvars
  - terraform init

jobs:
# Provision Amazon RDS MySQL with Terraform
  - name: prov_aws_rds_mysql_tf
    type: runSh
    steps:
      - IN: aws_vpc_tf_info
      - IN: aws_rds_tf_repo
        switch: off
      - IN: aws_rds_tf_creds
        switch: off
      - IN: aws_rds_mysql_tf_state
        switch: off
      - IN: aws_rds_mysql_tf_settings
        switch: off
      - TASK:
          name: prov_aws_rds_mysql
          runtime:
            options:
              env:
                - aws_region: "us-east-1"
          script:
            - *terraform-init
            - terraform apply -auto-approve -var-file=terraform.tfvars
      - OUT: aws_rds_mysql_tf_info
        overwrite: true
      - OUT: aws_rds_mysql_tf_state
    on_success:
      script:
        - shipctl put_resource_state_multi aws_rds_mysql_tf_info "engine=$(terraform output engine)" "engine_version=$(terraform output engine_version)" "endpoint=$(terraform output endpoint)"
        - shipctl put_resource_state_multi aws_rds_mysql_tf_info "port=$(terraform output port)" "db_name=$(terraform output db_name)" "db_user=$(terraform output db_user)"
    always:
      script:
        - shipctl copy_file_to_resource_state terraform.tfstate aws_rds_mysql_tf_state
        - popd
    flags:
      - aws_rds
      - mysql
      - aws
      - terraform

# De-provision Amazon RDS MySQL with Terraform
  - name: deprov_aws_rds_mysql_tf
    type: runSh
    steps:
      - IN: aws_rds_tf_repo
        switch: off
      - IN: aws_rds_mysql_tf_state
        switch: off
      - IN: aws_rds_tf_creds
        switch: off
      - IN: aws_rds_mysql_tf_info
        switch: off
      - TASK:
          name: deprov_aws_rds_mysql
          runtime:
            options:
              env:
                - aws_region: "us-east-1"
          script:
            - *terraform-init
            - terraform destroy -force -auto-approve -var-file=terraform.tfvars
      - OUT: aws_rds_mysql_tf_state
    always:
      script:
        - shipctl copy_file_to_resource_state terraform.tfstate aws_rds_mysql_tf_state
        - popd
    flags:
      - aws_rds
      - mysql
      - aws
      - terraform
